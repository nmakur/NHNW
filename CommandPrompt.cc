#include<iostream>
#include<fstream>
#include<string>
#include<vector>
#include <bits/stdc++.h>
#include<stdio.h>
#include<chrono>
#include "FoodFuncs.hpp"
using namespace std;

void checkInp(bool needInp){
	if(needInp){
		bool check;
		string temp;
		cout << "doInput? >> ";
		cin >> check;
		getline(cin, temp);
		if(check){
			doInput();
		}
	}
}

void doCommandPrompt(){
	cout << ">> ";
	string inp="";
	getline(cin, inp);
	inp.erase(inp.length()-1);
	bool needInp = true;
	retval temp;
	while(inp != "exit"){
		if(inp == "doInput"){
			doInput();
			cout << "done" << endl;
			needInp = false;
		}else if(inp.substr(0,11) == "getDataFrom"){
			getDataFrom(inp.substr(12));
			cout << "done" << endl;
		}else if(inp.substr(0,10) == "saveDataTo"){
			saveDataTo(inp.substr(11));
			cout << "done" << endl;
		}else if(inp == "doRandomData"){
			doRandomData();
			cout << "done" << endl;
		}else if(inp == "doTakeCheap"){
			checkInp(needInp);
			temp = doTakeCheap();
			cout << "TOTAL COST: " << temp.cost << endl;
			cout << "NUMBER OF EDGES: " << temp.edges << endl;
			cout << "TIME TAKEN: " << temp.runtime.count() << " nanoseconds" << endl;
			logShipments("THIS SHIPMENT WAS GENERATED BY doTakeCheap()");
			needInp = true;
		}else if(inp == "doTakeExpensiveDelta"){
			checkInp(needInp);
			temp = doTakeExpensiveDelta();
			cout << "TOTAL COST: " << temp.cost << endl;
			cout << "NUMBER OF EDGES: " << temp.edges << endl;
			cout << "TIME TAKEN: " << temp.runtime.count() << " nanoseconds" << endl;
			logShipments("THIS SHIPMENT WAS GENERATED BY doTakeExpensiveDelta()");
			needInp = true;
		}else if(inp == "doBruteForce"){
			checkInp(needInp);
			temp = doBruteForce();
			cout << "TOTAL COST: " << temp.cost << endl;
			cout << "NUMBER OF EDGES: " << temp.edges << endl;
			cout << "TIME TAKEN: " << temp.runtime.count() << " nanoseconds" << endl;
			logShipments("THIS SHIPMENT WAS GENERATED BY doBruteForce()");
			needInp = true;
		}else if(inp == "doAvoidExpensive"){
			checkInp(needInp);
			temp = doAvoidExpensive();
			cout << "TOTAL COST: " << temp.cost << endl;
			cout << "NUMBER OF EDGES: " << temp.edges << endl;
			cout << "TIME TAKEN: " << temp.runtime.count() << " nanoseconds" << endl;
			logShipments("THIS SHIPMENT WAS GENERATED BY doAvoidExpensive()");
			needInp = true;
		}else if(inp == "doAvoidCheapDelta"){
			checkInp(needInp);
			temp = doAvoidCheapDelta();
			cout << "TOTAL COST: " << temp.cost << endl;
			cout << "NUMBER OF EDGES: " << temp.edges << endl;
			cout << "TIME TAKEN: " << temp.runtime.count() << " nanoseconds" << endl;
			logShipments("THIS SHIPMENT WAS GENERATED BY doAvoidCheapDelta()");
			needInp = true;
		} else if(inp == "doLinear"){
			checkInp(needInp);
			temp = doLinear();
			cout << "TOTAL COST: " << temp.cost << endl;
			cout << "NUMBER OF EDGES: " << temp.edges << endl;
			cout << "TIME TAKEN: " << temp.runtime.count() << " nanoseconds" << endl;
			logShipments("THIS SHIPMENT WAS GENERATED BY doLinear()");
			needInp=true;
		}else if(inp == "doSoftmax"){
			checkInp(needInp);
			temp = doSoftmax();
			cout << "TOTAL COST: " << temp.cost << endl;
			cout << "NUMBER OF EDGES: " << temp.edges << endl;
			cout << "TIME TAKEN: " << temp.runtime.count() << " nanoseconds" << endl;
			logShipments("THIS SHIPMENT WAS GENERATED BY doSoftmax()");
			needInp=true;
		}else if(inp.substr(0,8) == "runSimul"){
			bool includes[] = {true, true, true, true, true, true};
			runSimul(stoi(inp.substr(9)),includes);
			cout << "done" << endl;
		}else if(inp == "printFoodTypes"){
			printFoodTypes();
		}else if(inp == "printDonors"){
			printDonors();
		}else if(inp == "printBanks"){
			printBanks();
		}else if(inp == "printEdges"){
			printEdges();
		}else if(inp == "printShipments"){
			printShipments();
		}else if(inp.substr(0,7) == "logNote"){
			logNote(inp.substr(8));
			cout << "done" << endl;
		}else if(inp == "logShipments"){
			logShipments();
			cout << "done" << endl;
		}else if(inp == "logData"){
			checkInp(needInp);
			logData();
			cout << "done" << endl;
		}else if(inp == "clearLog"){
			clearLog();
			cout << "done" << endl;
		}else if(inp == "exportLog"){
			exportLog();
			cout << "done" << endl;
		}else{
			cout << "ERROR\n";
		}
		cout << ">> ";
		getline(cin, inp);
		inp.erase(inp.length()-1);
	}
}
